/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AIFilterService_H
#define AIFilterService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "AIFilterMessage_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class AIFilterServiceIf {
 public:
  virtual ~AIFilterServiceIf() {}
  virtual void invokeAIFilter(AIFilterResponse& _return, const AIFilterRequest& req) = 0;
};

class AIFilterServiceIfFactory {
 public:
  typedef AIFilterServiceIf Handler;

  virtual ~AIFilterServiceIfFactory() {}

  virtual AIFilterServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AIFilterServiceIf* /* handler */) = 0;
};

class AIFilterServiceIfSingletonFactory : virtual public AIFilterServiceIfFactory {
 public:
  AIFilterServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<AIFilterServiceIf>& iface) : iface_(iface) {}
  virtual ~AIFilterServiceIfSingletonFactory() {}

  virtual AIFilterServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AIFilterServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<AIFilterServiceIf> iface_;
};

class AIFilterServiceNull : virtual public AIFilterServiceIf {
 public:
  virtual ~AIFilterServiceNull() {}
  void invokeAIFilter(AIFilterResponse& /* _return */, const AIFilterRequest& /* req */) {
    return;
  }
};

typedef struct _AIFilterService_invokeAIFilter_args__isset {
  _AIFilterService_invokeAIFilter_args__isset() : req(false) {}
  bool req :1;
} _AIFilterService_invokeAIFilter_args__isset;

class AIFilterService_invokeAIFilter_args {
 public:

  AIFilterService_invokeAIFilter_args(const AIFilterService_invokeAIFilter_args&);
  AIFilterService_invokeAIFilter_args& operator=(const AIFilterService_invokeAIFilter_args&);
  AIFilterService_invokeAIFilter_args() {
  }

  virtual ~AIFilterService_invokeAIFilter_args() throw();
  AIFilterRequest req;

  _AIFilterService_invokeAIFilter_args__isset __isset;

  void __set_req(const AIFilterRequest& val);

  bool operator == (const AIFilterService_invokeAIFilter_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const AIFilterService_invokeAIFilter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AIFilterService_invokeAIFilter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AIFilterService_invokeAIFilter_pargs {
 public:


  virtual ~AIFilterService_invokeAIFilter_pargs() throw();
  const AIFilterRequest* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AIFilterService_invokeAIFilter_result__isset {
  _AIFilterService_invokeAIFilter_result__isset() : success(false) {}
  bool success :1;
} _AIFilterService_invokeAIFilter_result__isset;

class AIFilterService_invokeAIFilter_result {
 public:

  AIFilterService_invokeAIFilter_result(const AIFilterService_invokeAIFilter_result&);
  AIFilterService_invokeAIFilter_result& operator=(const AIFilterService_invokeAIFilter_result&);
  AIFilterService_invokeAIFilter_result() {
  }

  virtual ~AIFilterService_invokeAIFilter_result() throw();
  AIFilterResponse success;

  _AIFilterService_invokeAIFilter_result__isset __isset;

  void __set_success(const AIFilterResponse& val);

  bool operator == (const AIFilterService_invokeAIFilter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AIFilterService_invokeAIFilter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AIFilterService_invokeAIFilter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AIFilterService_invokeAIFilter_presult__isset {
  _AIFilterService_invokeAIFilter_presult__isset() : success(false) {}
  bool success :1;
} _AIFilterService_invokeAIFilter_presult__isset;

class AIFilterService_invokeAIFilter_presult {
 public:


  virtual ~AIFilterService_invokeAIFilter_presult() throw();
  AIFilterResponse* success;

  _AIFilterService_invokeAIFilter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AIFilterServiceClient : virtual public AIFilterServiceIf {
 public:
  AIFilterServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AIFilterServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void invokeAIFilter(AIFilterResponse& _return, const AIFilterRequest& req);
  void send_invokeAIFilter(const AIFilterRequest& req);
  void recv_invokeAIFilter(AIFilterResponse& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AIFilterServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<AIFilterServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AIFilterServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_invokeAIFilter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AIFilterServiceProcessor(::apache::thrift::stdcxx::shared_ptr<AIFilterServiceIf> iface) :
    iface_(iface) {
    processMap_["invokeAIFilter"] = &AIFilterServiceProcessor::process_invokeAIFilter;
  }

  virtual ~AIFilterServiceProcessor() {}
};

class AIFilterServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AIFilterServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< AIFilterServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< AIFilterServiceIfFactory > handlerFactory_;
};

class AIFilterServiceMultiface : virtual public AIFilterServiceIf {
 public:
  AIFilterServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<AIFilterServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AIFilterServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<AIFilterServiceIf> > ifaces_;
  AIFilterServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<AIFilterServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void invokeAIFilter(AIFilterResponse& _return, const AIFilterRequest& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->invokeAIFilter(_return, req);
    }
    ifaces_[i]->invokeAIFilter(_return, req);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class AIFilterServiceConcurrentClient : virtual public AIFilterServiceIf {
 public:
  AIFilterServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AIFilterServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void invokeAIFilter(AIFilterResponse& _return, const AIFilterRequest& req);
  int32_t send_invokeAIFilter(const AIFilterRequest& req);
  void recv_invokeAIFilter(AIFilterResponse& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
