/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "AIFilterMessage_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




AIFilterRequest::~AIFilterRequest() throw() {
}


void AIFilterRequest::__set_url(const std::string& val) {
  this->url = val;
}

void AIFilterRequest::__set_taskId(const std::string& val) {
  this->taskId = val;
}
std::ostream& operator<<(std::ostream& out, const AIFilterRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AIFilterRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->url);
          this->__isset.url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->taskId);
          this->__isset.taskId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AIFilterRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AIFilterRequest");

  xfer += oprot->writeFieldBegin("url", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("taskId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->taskId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AIFilterRequest &a, AIFilterRequest &b) {
  using ::std::swap;
  swap(a.url, b.url);
  swap(a.taskId, b.taskId);
  swap(a.__isset, b.__isset);
}

AIFilterRequest::AIFilterRequest(const AIFilterRequest& other0) {
  url = other0.url;
  taskId = other0.taskId;
  __isset = other0.__isset;
}
AIFilterRequest& AIFilterRequest::operator=(const AIFilterRequest& other1) {
  url = other1.url;
  taskId = other1.taskId;
  __isset = other1.__isset;
  return *this;
}
void AIFilterRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AIFilterRequest(";
  out << "url=" << to_string(url);
  out << ", " << "taskId=" << to_string(taskId);
  out << ")";
}


AIFilterResponse::~AIFilterResponse() throw() {
}


void AIFilterResponse::__set_url(const std::string& val) {
  this->url = val;
}

void AIFilterResponse::__set_taskId(const std::string& val) {
  this->taskId = val;
}

void AIFilterResponse::__set_saturation(const double val) {
  this->saturation = val;
}

void AIFilterResponse::__set_brightness(const double val) {
  this->brightness = val;
}

void AIFilterResponse::__set_contrast(const double val) {
  this->contrast = val;
}

void AIFilterResponse::__set_shape(const double val) {
  this->shape = val;
}

void AIFilterResponse::__set_gamma(const double val) {
  this->gamma = val;
}
std::ostream& operator<<(std::ostream& out, const AIFilterResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AIFilterResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->url);
          this->__isset.url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->taskId);
          this->__isset.taskId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->saturation);
          this->__isset.saturation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->brightness);
          this->__isset.brightness = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->contrast);
          this->__isset.contrast = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->shape);
          this->__isset.shape = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->gamma);
          this->__isset.gamma = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AIFilterResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AIFilterResponse");

  xfer += oprot->writeFieldBegin("url", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("taskId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->taskId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("saturation", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->saturation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("brightness", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->brightness);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contrast", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->contrast);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("shape", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->shape);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gamma", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->gamma);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AIFilterResponse &a, AIFilterResponse &b) {
  using ::std::swap;
  swap(a.url, b.url);
  swap(a.taskId, b.taskId);
  swap(a.saturation, b.saturation);
  swap(a.brightness, b.brightness);
  swap(a.contrast, b.contrast);
  swap(a.shape, b.shape);
  swap(a.gamma, b.gamma);
  swap(a.__isset, b.__isset);
}

AIFilterResponse::AIFilterResponse(const AIFilterResponse& other2) {
  url = other2.url;
  taskId = other2.taskId;
  saturation = other2.saturation;
  brightness = other2.brightness;
  contrast = other2.contrast;
  shape = other2.shape;
  gamma = other2.gamma;
  __isset = other2.__isset;
}
AIFilterResponse& AIFilterResponse::operator=(const AIFilterResponse& other3) {
  url = other3.url;
  taskId = other3.taskId;
  saturation = other3.saturation;
  brightness = other3.brightness;
  contrast = other3.contrast;
  shape = other3.shape;
  gamma = other3.gamma;
  __isset = other3.__isset;
  return *this;
}
void AIFilterResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AIFilterResponse(";
  out << "url=" << to_string(url);
  out << ", " << "taskId=" << to_string(taskId);
  out << ", " << "saturation=" << to_string(saturation);
  out << ", " << "brightness=" << to_string(brightness);
  out << ", " << "contrast=" << to_string(contrast);
  out << ", " << "shape=" << to_string(shape);
  out << ", " << "gamma=" << to_string(gamma);
  out << ")";
}


