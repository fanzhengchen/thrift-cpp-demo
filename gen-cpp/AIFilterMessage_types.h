/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AIFilterMessage_TYPES_H
#define AIFilterMessage_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>




class AIFilterRequest;

class AIFilterResponse;

typedef struct _AIFilterRequest__isset {
  _AIFilterRequest__isset() : url(false), taskId(false) {}
  bool url :1;
  bool taskId :1;
} _AIFilterRequest__isset;

class AIFilterRequest : public virtual ::apache::thrift::TBase {
 public:

  AIFilterRequest(const AIFilterRequest&);
  AIFilterRequest& operator=(const AIFilterRequest&);
  AIFilterRequest() : url(), taskId() {
  }

  virtual ~AIFilterRequest() throw();
  std::string url;
  std::string taskId;

  _AIFilterRequest__isset __isset;

  void __set_url(const std::string& val);

  void __set_taskId(const std::string& val);

  bool operator == (const AIFilterRequest & rhs) const
  {
    if (!(url == rhs.url))
      return false;
    if (!(taskId == rhs.taskId))
      return false;
    return true;
  }
  bool operator != (const AIFilterRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AIFilterRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AIFilterRequest &a, AIFilterRequest &b);

std::ostream& operator<<(std::ostream& out, const AIFilterRequest& obj);

typedef struct _AIFilterResponse__isset {
  _AIFilterResponse__isset() : url(false), taskId(false), saturation(false), brightness(false), contrast(false), shape(false), gamma(false) {}
  bool url :1;
  bool taskId :1;
  bool saturation :1;
  bool brightness :1;
  bool contrast :1;
  bool shape :1;
  bool gamma :1;
} _AIFilterResponse__isset;

class AIFilterResponse : public virtual ::apache::thrift::TBase {
 public:

  AIFilterResponse(const AIFilterResponse&);
  AIFilterResponse& operator=(const AIFilterResponse&);
  AIFilterResponse() : url(), taskId(), saturation(0), brightness(0), contrast(0), shape(0), gamma(0) {
  }

  virtual ~AIFilterResponse() throw();
  std::string url;
  std::string taskId;
  double saturation;
  double brightness;
  double contrast;
  double shape;
  double gamma;

  _AIFilterResponse__isset __isset;

  void __set_url(const std::string& val);

  void __set_taskId(const std::string& val);

  void __set_saturation(const double val);

  void __set_brightness(const double val);

  void __set_contrast(const double val);

  void __set_shape(const double val);

  void __set_gamma(const double val);

  bool operator == (const AIFilterResponse & rhs) const
  {
    if (!(url == rhs.url))
      return false;
    if (!(taskId == rhs.taskId))
      return false;
    if (!(saturation == rhs.saturation))
      return false;
    if (!(brightness == rhs.brightness))
      return false;
    if (!(contrast == rhs.contrast))
      return false;
    if (!(shape == rhs.shape))
      return false;
    if (!(gamma == rhs.gamma))
      return false;
    return true;
  }
  bool operator != (const AIFilterResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AIFilterResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AIFilterResponse &a, AIFilterResponse &b);

std::ostream& operator<<(std::ostream& out, const AIFilterResponse& obj);



#endif
